<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <title><%= book.bookname %> 상세정보</title>
  <style>
    /* 기존 스타일 유지 */
    #map { width: 100%; height: 300px; margin-bottom: 20px; }
    
    /* 리뷰 섹션 스타일 추가 */
    .reviews-section {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
    }
    
    .review-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .sort-form {
      margin: 15px 0;
    }
    
    .reviews-list {
      list-style: none;
      padding: 0;
    }
    
    .review-item {
      background-color: #fff6ef;  /* 도서관 목록과 동일한 배경색 */
      border: none;  /* 기존 border 제거 */
      border-radius: 12px;  /* 도서관 목록과 동일한 radius */
      padding: 15px;
      margin-bottom: 15px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);  /* 약간의 그림자 추가 */
    }
    
    .review-item .user-info {
      font-weight: bold;
      margin-bottom: 8px;
    }
    
    .review-item .rating {
      color: #ffd700;
      margin-bottom: 8px;
    }
    
    .review-item .content {
      margin-bottom: 8px;
      line-height: 1.5;
    }
    
    .review-item .meta {
      color: #666;
      font-size: 0.9em;
    }
    
    .pagination {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 20px;
    }
    
    .pagination a, .pagination strong {
      padding: 5px 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      text-decoration: none;
    }
    
    .pagination strong {
      background-color: #007bff;
      color: white;
    }

    .libraries-section {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
    }

    .libraries-section h3 {
      margin-top: 0;
    }

    .map-section {
      margin-top: 24px;
      border-top: 1px solid #ddd;
      padding-top: 24px;
    }

    .location-controls {
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    #map {
      width: 100%;
      height: 400px;
      border-radius: 12px;
      overflow: hidden;
    }

    .location-controls .action-button {
      background-color: #ffb59c;
      border: 1px solid #333;
      border-radius: 12px;
      padding: 8px 16px;
      color: #333;
      font-weight: bold;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .location-controls .hint-text {
      display: block;
      margin-top: 8px;
      color: #666;
      font-size: 12px;
    }

    .library-list {
      list-style: none;
      padding: 0;
      margin: 20px 0;
    }

    .library-item {
      background-color: #fff6ef;
      padding: 16px;
      margin-bottom: 12px;
      border-radius: 12px;
      display: flex;
      gap: 16px;
    }

    .library-index {
      color: #c84a2f;
      font-weight: bold;
      font-size: 18px;
      min-width: 30px;
    }

    .library-info {
      flex: 1;
    }

    .library-name {
      font-size: 16px;
      font-weight: bold;
      margin-bottom: 8px;
    }

    .distance {
      color: #666;
      font-size: 14px;
      font-weight: normal;
      margin-left: 8px;
    }

    .library-contact {
      color: #666;
      font-size: 14px;
      margin-bottom: 12px;
    }

    .library-contact .address {
      margin-left: 12px;
    }

    .library-actions {
      display: flex;
      gap: 8px;
    }

    .action-button {
      background-color: #ffb59c;
      border: 1px solid #333;
      border-radius: 12px;
      padding: 4px 10px;
      color: #333;
      font-weight: bold;
      font-size: 14px;
      cursor: pointer;
      text-decoration: none;
    }

    .action-button.favorite {
      color: #c84a2f;
    }

    .book-info-container {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      display: flex;
      align-items: center;
      background-color: #fff6ef;
      border-radius: 12px;
    }

    .book-cover {
      width: 120px;
      height: auto;
      margin-right: 24px;
    }

    .book-details {
      flex: 1;
    }

    .book-details strong {
      font-size: 24px;
      color: #c84a2f;
      display: block;
      margin-bottom: 12px;
    }

    .libraries-section {
      margin-top: 0;  /* 상단 여백 제거 */
    }

    .review-header button {
      background-color: #ffb59c;
      border: 1px solid #333;
      border-radius: 12px;
      padding: 4px 10px;
      color: #333;
      font-weight: bold;
      font-size: 14px;
      cursor: pointer;
    }
  </style>
  <script type="text/javascript" src="https://oapi.map.naver.com/openapi/v3/maps.js?ncpKeyId=<%= NAVER_MAP_API_KEY %>&callback=initMap"></script>
</head>
<body>
  <div class="book-info-container">
    <img src="<%= book.bookImageURL %>" alt="책 표지" class="book-cover" />
    <div class="book-details">
      <strong><%= book.bookname %></strong>
      <p>저자: <%= book.authors %></p>
      <p>출판사: <%= book.publisher %></p>
      <p>ISBN: <%= book.isbn13 %></p>
    </div>
  </div>

<div class="libraries-section">
  <h3>소장 도서관 목록 (가까운 순 20개)</h3>
  <ul class="library-list">
    <% libraries.forEach((lib, idx) => { %>
      <li class="library-item">
        <div class="library-index"><%= idx + 1 %>.</div>
        <div class="library-info">
          <div class="library-name">
            <%= lib.name %>
            <% if (lib.distance !== Infinity) { %>
              <span class="distance">(<%= lib.distance.toFixed(2) %>km)</span>
            <% } %>
          </div>
          <div class="library-contact">
            <span>☎ <%= lib.tel || '-' %></span>
            <span class="address"><%= lib.address %></span>
          </div>
          <div class="library-actions">
            <a href="<%= lib.url || '#' %>" target="_blank" class="action-button">웹사이트</a>
            <button onclick="alert('즐겨찾기 기능은 추후 구현!')" class="action-button favorite">★ 즐겨찾기</button>
          </div>
        </div>
      </li>
    <% }) %>
  </ul>
  
  <div class="map-section">
    <div class="location-controls">
      <button onclick="requestLocation()" class="action-button">
        <i>📍</i> 내 위치로 찾기
      </button>
      <span class="hint-text">또는 지도를 클릭하여 원하는 위치의 도서관을 찾아보세요</span>
    </div>
    <div id="map"></div>
  </div>
</div>

<div class="reviews-section">
  <div class="review-header">
    <h3>후기</h3>
    <a href="/book/<%= book.isbn13 %>/review/new">
      <button type="button">후기 작성</button>
    </a>
  </div>

  <h4>총 <%= reviewsTotal %>개의 후기</h4>
  
  <form method="get" action="/book/<%= book.isbn13 %>" class="sort-form">
    <select name="sort" onchange="this.form.submit()">
      <option value="recent" <%= sort === 'recent' ? 'selected' : '' %>>최신순</option>
      <option value="popular" <%= sort === 'popular' ? 'selected' : '' %>>인기순</option>
    </select>
    <input type="hidden" name="page" value="<%= page %>">
  </form>

  <ul class="reviews-list">
    <% reviews.forEach(r => { %>
      <li class="review-item">
        <div class="user-info"><%= r.nickname || r.user_id %></div>
        <div class="rating">
          <% for(let i = 0; i < r.rating; i++) { %>⭐<% } %>
          (<%= r.rating %>점)
        </div>
        <div class="content"><%= r.content %></div>
        <div class="meta">
          작성일: <%= new Date(r.created_at).toLocaleDateString() %>
          <span class="likes">추천: <%= r.likes || 0 %></span>
        </div>
      </li>
    <% }) %>
  </ul>

  <div class="pagination">
    <% for(let i = 1; i <= totalPages; i++) { %>
      <% if(i === page) { %>
        <strong><%= i %></strong>
      <% } else { %>
        <a href="/book/<%= book.isbn13 %>?sort=<%= sort %>&page=<%= i %>"><%= i %></a>
      <% } %>
    <% } %>
  </div>
</div>
<script>
  var map = null;
  var markers = [];
  var currentLocationMarker = null;

  window.navermap_authFailure = function() {
    alert('네이버 지도 인증에 실패했습니다.');
  }

  function initMap() {
    const libraries = <%- JSON.stringify(libraries) %>;
    const centerLat = libraries.length > 0 ? Number(libraries[0].lat) : 37.5665;
    const centerLng = libraries.length > 0 ? Number(libraries[0].lng) : 126.9780;

    map = new naver.maps.Map('map', {
      center: new naver.maps.LatLng(centerLat, centerLng),
      zoom: 11
    });

    // 현재 위치 마커 추가 (빨간색)
    const myMarker = new naver.maps.Marker({
      position: new naver.maps.LatLng(<%= lat %>, <%= lng %>),
      map: map,
      icon: {
        content: '<div style="width: 12px; height: 12px; background: red; border-radius: 50%;"></div>',
        anchor: new naver.maps.Point(6, 6)
      }
    });

    // 도서관 마커 추가
    libraries.forEach(lib => {
      if (!lib.lat || !lib.lng) return;
      var marker = new naver.maps.Marker({
        position: new naver.maps.LatLng(Number(lib.lat), Number(lib.lng)),
        map: map
      });
      markers.push(marker);
      var infowindow = new naver.maps.InfoWindow({
        content: `
          <div style="padding:10px;font-size:12px;">
            <strong>${lib.name}</strong><br>
            <span id="status-${lib.libCode}">확인 중...</span>
          </div>`
      });

      naver.maps.Event.addListener(marker, 'click', async function() {
        infowindow.open(map, marker);
        try {
          const statusElement = document.getElementById(`status-${lib.libCode}`);
          statusElement.innerHTML = '<span style="color:#666">⟳ 확인중...</span>';
          
          const response = await fetch(`/api/library/status?isbn=<%= book.isbn13 %>&libCode=${lib.libCode}`);
          const data = await response.json();

          let status, color;
          if (data.hasBook === 'Y') {
            if (data.loanAvailable === 'Y') {
              status = '대출 가능';
              color = '#2ecc71';
            } else {
              status = '대출 중';
              color = '#e74c3c';
            }
          } else {
            status = '미소장';
            color = '#999';
          }
          statusElement.innerHTML = `<span style="color:${color}">● ${status}</span>`;
        } catch (error) {
          document.getElementById(`status-${lib.libCode}`).innerHTML = 
            '<span style="color:#666">⚠️ 확인 실패</span>';
        }
      });
    });

    // 지도 클릭 이벤트 추가
    naver.maps.Event.addListener(map, 'click', async function(e) {
      const clickedLat = e.coord.y;
      const clickedLng = e.coord.x;
      
      try {
        const response = await fetch(`/api/geocode?coords=${clickedLng},${clickedLat}`);
        const data = await response.json();
        
        if (data.status === 'OK') {
          if (currentLocationMarker) {
            currentLocationMarker.setMap(null);
          }
          
          currentLocationMarker = new naver.maps.Marker({
            position: new naver.maps.LatLng(clickedLat, clickedLng),
            map: map,
            icon: {
              content: '<div style="width: 12px; height: 12px; background: red; border-radius: 50%;"></div>',
              anchor: new naver.maps.Point(6, 6)
            }
          });

          const url = new URL(window.location.href);
          url.searchParams.set('region', data.regionCode);
          url.searchParams.set('lat', clickedLat);
          url.searchParams.set('lng', clickedLng);
          url.searchParams.set('nearRegions', JSON.stringify(data.nearRegions));
          window.location.href = url.toString();
        }
      } catch (error) {
        alert('선택한 위치의 정보를 가져오는데 실패했습니다.');
      }
    });
  }

  async function requestLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(async function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        console.log('위치 확인:', lat, lng);

        try {
          const response = await fetch(`/api/geocode?coords=${lng},${lat}`);
          const data = await response.json();
          console.log('API 응답:', data);

          if (data.regionCode) {
            const url = new URL(window.location.href);
            url.searchParams.set('region', data.regionCode);
            url.searchParams.set('lat', lat);
            url.searchParams.set('lng', lng);
            url.searchParams.set('nearRegions', JSON.stringify(data.nearRegions));
            
            console.log('새 URL:', url.toString());
            window.location.replace(url.toString());
          }
        } catch (error) {
          console.error('에러:', error);
        }
      }, function(error) {
        console.error('위치 에러:', error);
        alert('위치 정보 제공을 허용해주세요');
      });
    }
  }

  // 페이지 로드 시 실행
  document.addEventListener('DOMContentLoaded', function() {
    if (!window.location.search.includes('region=')) {
      requestLocation();
    }
  });
</script>
</body>
</html>